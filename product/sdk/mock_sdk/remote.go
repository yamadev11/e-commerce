// Code generated by MockGen. DO NOT EDIT.
// Source: ../remote.go

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spec "github.com/yamadev11/e-commerce/product/spec"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockProductService) List(ctx context.Context) (*spec.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(*spec.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProductServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProductService)(nil).List), ctx)
}

// UpdateQuantity mocks base method.
func (m *MockProductService) UpdateQuantity(ctx context.Context, productID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", ctx, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockProductServiceMockRecorder) UpdateQuantity(ctx, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockProductService)(nil).UpdateQuantity), ctx, productID, quantity)
}
